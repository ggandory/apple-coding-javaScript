/*
자바스크립트 비동기 처리 3가지 방식
자바스크립트는 싱글 스레드 프로그래밍 언어기 때문에 멀티 작업을 하기 위해선 
비동기 처리 방식이 자주 쓰인다. 비동기 처리는 백그라운드로 동작되기 때문에 
그 결과가 언제 반환될지 알수 없어, 완료되면 결과를 받아 처리하기 위해 사용되는 
대표적인 방법으로 콜백 함수(Callback) 와 이를 개선한 
프로미스 객체(Promise)Visit Website가 있다. 하지만 서비스 규모가 커질 수록 코드가 
복잡해짐에 따라 코드를 중첩해서 사용하다가 가독성이 떨어지고 유지보수가 어려워지는 상황이 
발생되게 되는데, 이를 Callback Hell, Promise Hell 이라고 불리운다.
*/

/* Callback Hell */
/*
getData (function (x) {
  getMoreData (x, function (y) {
    getMoreData (y, function (z) {
      ...
    });
  });
});
*/

/* Promise Hell */
/*
fetch ('https://example.com/api')
  .then(response => response.json())
  .then(data => fetch(`https://example.com/api/${data.id}`))
  .then(response => response.json())
  .then(data => fetch(`https://example.com/api/${data.id}/details`))
  .then(response => response.json())
  .then(data => console.log(data))
  .catch(error => console.error(error));
*/

/*
위의 코드를 보면 알 수 있듯이 콜백 헬은 코드가 활처럼 굽어 보기가 엉성해지고, 
프로미스 헬도 지나친 then 핸들러 남용으로 인해 구현하고자 하는 의도를 한번에 파악할수가 없다.
자바스크립트 async 와 await 는 이런 문제들을 해결하기 위해 탄생하였으며, 
문법에 있어서도 훨씬 단순해져 가독성과 유지보수성을 향상 시켜준다.
*/

/*
async function getData() {
  const response = await fetch('https://example.com/api');
  const data = await response.json();
  const response2 = await fetch(`https://example.com/api/${data.id}`);
  const data2 = await response2.json();
  const response3 = await fetch(`https://example.com/api/${data.id}/details`);
  const data3 = await response3.json();
  console.log(data3);
}

getData();
*/

/*
위 코드를 보면 콜백 헬과 같은 허리 굽은 코드는 없으며, 
프로미스 헬과 같은 지나친 then 핸들러 남용으로 인한 가독성 하향도 없다. 
마치 함수의 리턴값을 변수가 받는 정의문 형식대로 되어 있어 코드가 의도하고자 하는 
바를 동일 코드 레벨 라인에서 알수가 있어 훨씬 편하다.
*/
